import re

import icecream as ic
from matplotlib import rc, font_manager

from context.domains import Reader, File


class Solution(Reader):
    def __init__(self):
        rc('font', family=font_manager.FontProperties(fname='C:/Windows/Fonts/malgunsl.ttf').get_name())
        self.file = File()
        self.file.context = './data/'

    def hook(self):
        def print_menu():
            print('0. Exit')
            print('1. crawling')
            print('2. read_result')
            return input('메뉴 선택 \n')

        while 1:
            menu = print_menu()
            if menu == '0':
                break
            if menu == '1':
                self.crawling()
            if menu == '2':
                self.read_result()
            if menu == '3':
                pass
            elif menu == '0':
                break

    def preprocess(self):
        pass

    def organize_data(self):
        file = self.file
        file.fname = 'election_result'
        election_result = self.csv(file) # csv 파일을 df로 변경
        # print(election_result.head())
        '''
                   Unnamed: 0   광역시도   시군       pop      moon     hong      ahn
        0           0  서울특별시  종로구  102566.0   42512.0  22325.0  22313.0
        1           1  서울특별시   중구   82852.0   34062.0  17901.0  19372.0
        2           2  서울특별시  용산구  148157.0   58081.0  35230.0  32109.0
        3           3  서울특별시  성동구  203175.0   86686.0  40566.0  45674.0
        4           4  서울특별시  광진구  240030.0  105512.0  46368.0  52824.0
        '''
        sido_candi = election_result['광역시도']
        sido = [name[:2] if name[:2]
                                  in ['서울', '부산', '대구', '광주', '인천', '대전', '울산']
                      else '' for name in sido_candi]
        # print(sido)
        '''
        ['서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울',
         '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', '서울', 
        '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', '부산', 
        '대구', '대구', '대구', '대구', '대구', '대구', '대구', '대구', 
        '인천', '인천', '인천', '인천', '인천', '인천', '인천', '인천', '인천', '인천', 
        '광주', '광주', '광주', '광주', '광주', 
        '대전', '대전', '대전', '대전', '대전', 
        '울산', '울산', '울산', '울산', '울산', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 
        '', '', '', '', '', '', '', '']

        '''
        sigun_candi = [''] * len(election_result)

        for n in election_result.index:
            each = election_result['시군'][n]
            if each[:2] in ['수원', '성남', '안양', '안산', '고양',
                            '용인', '청주', '천안', '전주', '포항', '창원']:
                sigun_candi[n] = re.split('시', each)[0] + ' ' + \
                                 self.cut_char_sigu(re.split('시', each)[1])
            else:
                sigun_candi[n] = self.cut_char_sigu(each)
        # print(sigun_candi)
        '''
        ['종로', '중구', '용산', '성동', '광진', '동대문', '중랑', '성북', '강북', '도봉', '노원', '은평', '서대문', '마포', '양천',
         '강서', '구로', '금천', '영등포', '동작', '관악', '서초', '강남', '송파', '강동', '중구', '서구', '동구', '영도', '부산진',
          '동래', '남구', '북구', '해운대', '기장', '사하', '금정', '강서', '연제', '수영', '사상', '중구', '동구', '서구', '남구', 
          '북구', '수성', '달서', '달성', '중구', '동구', '남구', '연수', '남동', '부평', '계양', '서구', '강화', '옹진', '동구', 
          '서구', '남구', '북구', '광산', '동구', '중구', '서구', '유성', '대덕', '중구', '남구', '동구', '북구', '울주', 
          '세종특별자치', '수원 장안', '수원 권선', '수원 팔달', '수원 영통', '성남 수정', '성남 중원', '성남 분당', '의정부', 
          '안양 만안', '안양 동안', '부천', '광명', '평택', '양주', '동두천', '안산 상록', '안산 단원', '고양 덕양', '고양 일산동', 
          '고양 일산서', '과천', '의왕', '구리', '남양주', '오산', '화성', '시흥', '군포', '하남', '파주', '여주', '이천', '용인 처인', 
          '용인 수지', '용인 기흥', '안성', '김포', '광주', '포천', '연천', '양평', '가평', '춘천', '원주', '강릉', '동해', '삼척', 
          '태백', '정선', '속초', '고성', '양양', '인제', '홍천', '횡성', '영월', '평창', '화천', '양구', '철원', '청주 상당', 
          '청주 서원', '청주 흥덕', '청주 청원', '충주', '제천', '단양', '영동', '보은', '옥천', '음성', '진천', '괴산', '증평', 
          '천안 서북', '천안 동남', '공주', '보령', '아산', '서산', '태안', '금산', '논산', '계룡', '당진', '부여', '서천', '홍성', 
          '청양', '예산', '전주 완산', '전주 덕진', '군산', '익산', '정읍', '남원', '김제', '완주', '진안', '무주', '장수', '임실', 
          '순창', '고창', '부안', '목포', '여수', '순천', '나주', '광양', '담양', '장성', '곡성', '구례', '고흥', '보성', '화순', 
          '장흥', '강진', '완도', '해남', '진도', '영암', '무안', '영광', '함평', '신안', '포항 북구', '포항 남구', '울릉', '경주', 
          '김천', '안동', '구미', '영주', '영천', '상주', '문경', '예천', '경산', '청도', '고령', '성주', '칠곡', '군위', '의성', 
          '청송', '영양', '영덕', '봉화', '울진', '창원 의창', '창원 성산', '창원 마산합포', '창원 마산회원', '창원 진해', '진주', 
          '통영', '고성', '사천', '김해', '밀양', '거제', '의령', '함안', '창녕', '양산', '하동', '남해', '함양', '산청', '거창', 
          '합천', '제주', '서귀포']
        '''

        # 위 두 데이터를 합쳐 id column 생성
        ID_candi = [sido_candi[n] + ' ' + sigun_candi[n] for n in range(0, len(sigun_candi))]
        ID_candi = [name[1:] if name[0] == ' ' else name for name in ID_candi] # 광역시도에서 ' '처리 되었던 것들을 정리
        ID_candi = [name[:2] if name[:2] == '세종' else name for name in ID_candi] # 앞 두 글자가 세종일 경우 (세종특별자치) 세종만 나오게 정리
        # print(ID_candi)
        election_result['ID'] = ID_candi # ID 칼럼 생성 후 위 데이터 넣기
        # print(election_result.head(10))
        '''
                Unnamed: 0   광역시도    시군       pop      moon     hong      ahn         ID
        0           0  서울특별시   종로구  102566.0   42512.0  22325.0  22313.0   서울특별시 종로
        1           1  서울특별시    중구   82852.0   34062.0  17901.0  19372.0   서울특별시 중구
        2           2  서울특별시   용산구  148157.0   58081.0  35230.0  32109.0   서울특별시 용산
        3           3  서울특별시   성동구  203175.0   86686.0  40566.0  45674.0   서울특별시 성동
        4           4  서울특별시   광진구  240030.0  105512.0  46368.0  52824.0   서울특별시 광진
        5           5  서울특별시  동대문구  236092.0   98958.0  51631.0  53359.0  서울특별시 동대문
        6           6  서울특별시   중랑구  265706.0  111450.0  56545.0  62778.0   서울특별시 중랑
        7           7  서울특별시   성북구  295866.0  129263.0  57584.0  66518.0   서울특별시 성북
        8           8  서울특별시   강북구  210614.0   89645.0  42268.0  51669.0   서울특별시 강북
        9           9  서울특별시   도봉구  229233.0   94898.0  47461.0  55600.0   서울특별시 도봉
        0. Exit
        '''
        election_result[['rate_moon', 'rate_hong', 'rate_ahn']] = \
            election_result[['moon', 'hong', 'ahn']].div(election_result['pop'], axis=0)
        election_result[['rate_moon', 'rate_hong', 'rate_ahn']] *= 100
        # print(election_result.head())
        '''
                Unnamed: 0   광역시도   시군       pop  ...        ID  rate_moon  rate_hong   rate_ahn
        0           0  서울특별시  종로구  102566.0  ...  서울특별시 종로  41.448433  21.766472  21.754773
        1           1  서울특별시   중구   82852.0  ...  서울특별시 중구  41.111862  21.605996  23.381451
        2           2  서울특별시  용산구  148157.0  ...  서울특별시 용산  39.202333  23.778829  21.672280
        3           3  서울특별시  성동구  203175.0  ...  서울특별시 성동  42.665682  19.966039  22.480128
        4           4  서울특별시  광진구  240030.0  ...  서울특별시 광진  43.957839  19.317585  22.007249
        '''

    def cut_char_sigu(self, name):
        return name if len(name) == 2 else name[:-1]

if __name__ == '__main__':
    Solution().organize_data()
    Solution().hook()
